#!/bin/bash
# Copyright Â© 2012 Martin Ueding <dev@martin-ueding.de>

# Goes through the ``~/Branches`` folder and checks for the given remotes
# whether they need to be pushed.

set -e
set -u

###############################################################################
#                                  settings                                   #
###############################################################################

folders=( ~/Branches/*/ ~/Dokumente/Studium/*/*/ ~/.vim/bundle/*/ )

remotes=( github chaos )

###############################################################################

# Gather color codes using ``tput``.
if [[ -x /usr/bin/tput ]] && tput setaf 1 &> /dev/null
then
	bold="$(tput bold)"

	blue="$(tput setaf 4)"
	green="$(tput setaf 2)"
	orange="$(tput setaf 3)"
	red="$(tput setaf 1)"

	reset="$(tput sgr0)"
else
	bold=

	blue=
	green=
	orange=
	red=

	reset=
fi

###############################################################################

repo_count=0
mirrored_count=0
mirror_count=0

check-folder() {
	local project foldername lines

	project="$1"

	pushd "$project" > /dev/null

	# Skip non git repositories.
	if [[ ! -d .git ]]
	then
		popd > /dev/null
		continue
	fi

	# If we made it to here, count the repository.
	repo_count=$(( repo_count + 1 ))

	foldername=${project#./}
	foldername=${foldername%/}

	local is_counted=false

	for remote in "${remotes[@]}"
	do
		# Check if this is an actual remote.
		if git remote | grep "$remote" > /dev/null
		then
			# If we made it to here, count the mirror
			mirror_count=$(( mirror_count + 1 ))

			if [[ "$is_counted" = "false" ]]
			then
				is_counted=true
				mirrored_count=$(( mirrored_count + 1 ))
			fi

			# Check whether this remote needs to be pushed.
			lines="$(git log --oneline "$remote/master..master" | wc -l)"
			if (( lines > 0 ))
			then
				echo -e "${orange}DIRTY${reset}\t$remote\t $foldername"
				git push "$remote" --mirror
			else
				echo -e "${green}OK${reset}\t$remote\t $foldername"
			fi
		fi
	done

	popd > /dev/null
}

for repo in "${folders[@]}"
do
	check-folder "$repo"
done

echo
echo "There are $repo_count repos, $mirrored_count mirrored on $mirror_count mirrors."
