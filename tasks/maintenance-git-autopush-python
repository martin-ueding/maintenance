#!/usr/bin/python3
# -*- coding: utf-8 -*-

# Copyright © 2013 Martin Ueding <dev@martin-ueding.de>

import argparse
import re
import colorcodes
import os
import subprocess

__docformat__ = "restructuredtext en"

c = colorcodes.Colorcodes()

mirrors = ["chaos", "bitbucket", "github"]


def find_repos():
    start_folders = ["Branches"]

    repos = []

    for start in start_folders:
        for dirpath, dirnames, filenames in os.walk(os.path.expanduser(os.path.join("~", start))):
            if dirpath.endswith("/.git"):
                dirnames = []
                repos.append(os.path.dirname(dirpath))
                print(repos[-1])


    return repos

def find_remotes(repo):
    os.chdir(repo)
    output = subprocess.check_output(["git", "remote"]).decode().strip()
    remotes = [x for x in output.split("\n") if len(x) > 0]
    return remotes

def handle_repo(repo):
    remotes = find_remotes(repo)

	# If there are no remotes in this repo, there is nothing more to do.
    if len(remotes) == 0:
        return

    #fetch(repo, remotes)
    init(repo, remotes)
    push(repo, remotes)

def fetch(repo, remotes):
    for remote in remotes:
        if remote in mirrors:
            continue

        print(c.blue + "{:8} {:12} {}".format("FETCH", remote, os.path.basename(repo)) + c.reset)
        subprocess.call(["git", "fetch", remote, "--prune"])

def init(repo, remotes):
    is_public = False
    for mirror in mirrors:
        if mirror in remotes:
            is_public = True
            break

    if not is_public:
        return

    remote_name = find_remote_name(repo, remotes)

    for mirror in mirrors:
        if mirror in remotes:
            continue

        print(c.red + "{:8} {:12} {}".format("INIT", remote, os.path.basename(repo)) + c.reset)
        subprocess.call(["git", "init-{}".format(remote), remote_name])

def push(repo, remotes):
    for remote in remotes:
        if not remote in mirrors:
            continue

        output = subprocess.check_output(["git", "log", "--oneline", "{}/master..master".format(remote)]).decode().strip()
        lines = [x for x in output.split("\n") if len(x) > 0]
        if len(lines) == 0:
            print(c.green + "{:8} {:12} {}".format("OK", remote, os.path.basename(repo)) + c.reset)
        else:
            print(c.orange + "{:8} {:12} {}".format("PUSH", remote, os.path.basename(repo)) + c.reset)
            subprocess.call(["git", "push", remote, "--mirror"])

def find_remote_name(repo, remotes):
    reponame = None

    for remote in remotes:
        output = subprocess.check_output(["git", "config", "--get", "remote.{}.url".format(remote)]).decode().strip()
        match = re.search(r"([^/.]+)(\.git)?$", output)
        if match:
            reponame = match.group(1)
            break

    if reponame is None:
        reponame = os.path.basename(repo)
        print(c.red+"Could not determine remote name for {}!.".format(os.path.basename(repo))+c.reset)

    return reponame

def main():
    options = _parse_args()

    print(c.purple+"Welcome to git-autopush, the next generation."+c.reset)

    print(c.cyan+"Populating list of git repositories …"+c.reset)
    repos = find_repos()
    print(c.cyan+"Done. Found {} git repositories.".format(len(repos))+c.reset)

    repos.sort()

    for repo in repos:
        handle_repo(repo)

def _parse_args():
    """
    Parses the command line arguments.

    :return: Namespace with arguments.
    :rtype: Namespace
    """
    parser = argparse.ArgumentParser(description="")
    #parser.add_argument("args", metavar="N", type=str, nargs="*", help="Positional arguments.")
    #parser.add_argument("", dest="", type="", default=, help=)
    #parser.add_argument("--version", action="version", version="<the version>")

    return parser.parse_args()


if __name__ == "__main__":
    main()
