#!/bin/bash
# Copyright Â© 2012-2013 Martin Ueding <dev@martin-ueding.de>

# Goes through the ``~/Branches`` folder and checks for the given remotes
# whether they need to be pushed.

set -e

shopt -s extglob

###############################################################################
#                                  settings                                   #
###############################################################################

remotes=( github chaos bitbucket )

###############################################################################

# Gather color codes using ``tput``.
if [[ -x /usr/bin/tput ]] && tput setaf 1 &> /dev/null
then
	bold="$(tput bold)"

	blue="$(tput setaf 4)"
	green="$(tput setaf 2)"
	orange="$(tput setaf 3)"
	red="$(tput setaf 1)"

	reset="$(tput sgr0)"
else
	bold=

	blue=
	green=
	orange=
	red=

	reset=
fi

###############################################################################

# http://stackoverflow.com/a/8574392/653152
containsElement () {
	local e
	for e in "${@:2}"
	do
		if [[ "$e" == "$1" ]] 
		then
			return 0
		fi
	done
	return 1
}

check-folder() {
	local project foldername lines has_remotes

	project="$1"

	cd "$project"

	# Skip non git repositories.
	if [[ ! -d .git ]]
	then
		exit 1
	fi

	foldername="${project#./}"
	foldername="${foldername%/}"

	has_remotes=()

	for remote in "${remotes[@]}"
	do
		# Check if this is an actual remote.
		if git remote | grep "$remote" > /dev/null
		then
			has_remotes=("${has_remotes[@]}" "$remote")
		fi
	done

	# If there are no remotes in this repo, there is nothing more to do.
	if (( ${#has_remotes[@]} == 0 ))
	then
		return 0
	fi

	for remote in "${remotes[@]}"
	do
		if containsElement "$remote" "${has_remotes[@]}"
		then
			remoteurl="$(git config --get "remote.$remote.url")"
			remoteurl2="${remoteurl##*/}"
			reponame="${remoteurl2%.git}"
			break
		fi
	done

	for remote in "${remotes[@]}"
	do
		if ! containsElement "$remote" "${has_remotes[@]}"
		then
			printf "%s%-8s%s" "${red}" "INIT" "${reset}"
			printf "%-12s %s\n" "$remote" "$foldername"
			git "push-$remote" "$reponame"
		fi
	done

	for remote in "${has_remotes[@]}"
	do
		# Check whether this remote needs to be pushed.
		lines="$(git log --oneline "$remote/master..master" | wc -l)"
		if (( lines > 0 ))
		then
			printf "%s%-8s%s" "${orange}" "PUSH" "${reset}"
			printf "%-12s %s\n" "$remote" "$foldername"
			if ! git push "$remote" --mirror
			then
				echo -e "${red}Push failed.$reset"
			fi
		else
			printf "%s%-8s%s" "${green}" "OK" "${reset}"
			printf "%-12s %s\n" "$remote" "$foldername"
		fi
	done
}

find "$HOME/"!(Bilder|Backup) -type d -name .git | sort | while read -r git_dir
do
	check-folder "${git_dir%/.git}"
done

if type backup-status &> /dev/null
then
	backup-status update 'GitHub & Chaos' to
fi
