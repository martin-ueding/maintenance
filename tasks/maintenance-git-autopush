#!/bin/bash
# Copyright Â© 2012-2013 Martin Ueding <dev@martin-ueding.de>

# Goes through the ``~/Branches`` folder and checks for the given remotes
# whether they need to be pushed.

set -e
set -u

shopt -s extglob

###############################################################################
#                                  settings                                   #
###############################################################################

remotes=( github chaos )

###############################################################################

# Gather color codes using ``tput``.
if [[ -x /usr/bin/tput ]] && tput setaf 1 &> /dev/null
then
	bold="$(tput bold)"

	blue="$(tput setaf 4)"
	green="$(tput setaf 2)"
	orange="$(tput setaf 3)"
	red="$(tput setaf 1)"

	reset="$(tput sgr0)"
else
	bold=

	blue=
	green=
	orange=
	red=

	reset=
fi

###############################################################################

check-folder() {
	local project foldername lines

	project="$1"

	cd "$project"

	# Skip non git repositories.
	if [[ ! -d .git ]]
	then
		exit 1
	fi

	foldername="${project#./}"
	foldername="${foldername%/}"

	for remote in "${remotes[@]}"
	do
		# Check if this is an actual remote.
		if git remote | grep "$remote" > /dev/null
		then
			# Check whether this remote needs to be pushed.
			lines="$(git log --oneline "$remote/master..master" | wc -l)"
			if (( lines > 0 ))
			then
				echo -e "${orange}DIRTY${reset}\t$remote\t$foldername"
				git push "$remote" --mirror
			else
				echo -e "${green}OK${reset}\t$remote\t$foldername"
			fi
		fi
	done
}

find "$HOME/"!(Bilder|Backup) -type d -name .git | sort | while read -r git_dir
do
	check-folder "${git_dir%/.git}"
done
